*****************************************************************
;* This stationery serves as the framework for a                 *
;* user application (single file, absolute assembly application) *
;* For a more comprehensive program that                         *
;* demonstrates the more advanced functionality of this          *
;* processor, please see the demonstration applications          *
;* located in the examples subdirectory of the                   *
;* Freescale CodeWarrior for the HC12 Program directory          *
;*****************************************************************

; export symbols
            XDEF Entry, _Startup            ; export 'Entry' symbol
            ABSENTRY Entry        ; for absolute assembly: mark this as application entry point



; Include derivative-specific definitions 
		INCLUDE 'derivative.inc' 

ROMStart    EQU  $4000  ; absolute address to place my code/constant data

; variable/data section

            ORG RAMStart
; Insert here your data definition.

;Value to write to PORT B
	    LEDON  equ $01  
; Lookup table for 0,1,2,3,4,5,6,7,8,9 using form constant byte
	    Seg_output fcb $3f, $06, $5b, $4f, $66, $6d, $7d, $07, $7f,$67 

; code section
            ORG   ROMStart

Entry:
_Startup:
            LDS   #RAMEnd+1       ; initialize the stack pointer

            CLI                     ; enable interrupts
            
;Configure LEDs and Push Button	    
	  ldaa    #$FF
          staa    DDRB   ; Configure PORT B as output
          staa    DDRJ   ; Port J as output to enable LED
          ldaa    #00    ; need to write 0 to J0
          staa    PTJ    ; to enable LEDs
	  staa    DDRH   ; Configure PORT H as input

one_number:
	  movb #$07, PTP   ; enable the fourth 7-seg (the far right one)
          ldaa PTH; read the value from the dip switches
	  
          bsr send_led
	  bra one-number




;**************************************************************
;*                 Additional Function                        *
;**************************************************************
send_led:             
           ldx #Seg_output      ; Load the lookup table with HEX values
  
           stab PORTB            ; Send the value to the 7-seg
           bsr delay             ; Delay to ensure 
           rts

; 0.5ms delay 0.5ms/ 41.66ns = 12001.9203 E-cycles, take 12000 E-cycles
delay:
          ldx #4000
delay_loop:
          
	  dbne x,delay_loop ;  3 E-cycles if branching, 1 E-cycle if not
          
          rts	
            
;**************************************************************
;*                 Interrupt Vectors                          *
;**************************************************************
            ORG   $FFFE
            DC.W  Entry           ; Reset Vector
